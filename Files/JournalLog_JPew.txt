4/12:
tested for RTS at 10 kHz by setting nplc (line 74) to 0.001/60 and timeDelay (line 73) to 0.0001
tested for RTS at 5 kHz by setting nplc (line 74) to 0.01/60 and timeDelay (line 73) to 0.0002
tested for RTS at 1 kHz by setting nplc (line 74) to 0.05/60 and timeDelay (line 73) to 0.001
tested for RTS at 1 kHz by setting nplc (line 74) to 0.1/60 and timeDelay (line 73) to 0.002
Dropped the range for the RTS voltage measuerments to 1 V and saw a double gaussian 

To do:
fix Vgs label in graph



5/4:
changed save function to save csv of every row vs overwritting the save and concatinating new data. (saves time)

5/7:
change save funtion to .feather format vs .csv

5/8:
changed script to only plot signals with detected rts. 
	- Detection needs work because we don't plot all signals with rts
	- check to see if argrelmax(vOut['Vgs']) finds the same peaks it does with histogram.
		- np.histogram(rtsData['Vgs'], bins='auto') does the same as plt.hist without plotting


5/15:
changed from using argrelmax function to find rts amplitude in histogram to find_peaks.
	- setting width = 2 seems to remove most aliasing/undesired peaks.
	- setting height = 100 removes peaks less that have less than 100 points
started 10nA characterization of bank 1. Passing data collection to Jay.
changed the way rts amplitude is calculated
	- Finds the steady state voltage by finding the max y value for histogram
	- uses the steady state voltage to calculate multiple level rts
	- negative values means the rts shifted the voltage down
	- added a filter for the signal
		- produces more accurate histograms for amplitude calculations
		- switched back to width = 1 because filtered data removes the aliasing/unwanted peaks

5/26:
switched to new board
changed the com port in rtsEval.py to com5 from com4
commented out the power function of case 7 in RTSmobo_picoV2 
created a case 8 to test the function of resetBin, Csin, DHin, Din
found a "dead soldier" that worked on bank 1 for rts measurements.
	- dieX and dieY are currently unknown
made the 10uA test plot all pictures to analyze for noise 
	- (switched it back to needing two peaks to be rts)
put the rts eval board into the custom faraday cage.
fixed the initial spikes by turning channel b on at the same time as channel a
	- channel A applys current for 20 sec before record
	- channel B turns on and zeros out 20 sec before record

6/2:
updated code to calculate 1/f noise using welch's method
updated code to extract the mean capture/emission times
	- need to change time constants from # of data points to time
	- unsure how reliable the method is
		- some look reasonable
		- some capture too many peaks and skews the results 
			- to look at meaning change debug to True



